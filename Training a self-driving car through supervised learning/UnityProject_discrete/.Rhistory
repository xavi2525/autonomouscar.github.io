logdata <- read.csv('log.txt', header=F)
colnames(logdata)<- c("sensor0","sensor1","sensor2","sensor3","sensor4","turn")
summary(logdata)
summary(logdata)
summary(logdata)
summary(logdata)
logdata <- read.csv('log.txt', header=F)
colnames(logdata)<- c("sensor0","sensor1","sensor2","sensor3","sensor4","turn")
index <- sample(1:nrow(logdata),round(0.75*nrow(logdata)))
train_ <- logdata[index,]
test_ <- logdata[-index,]
test_
load(file="trainedNN.RData")
pr.nn <- compute(nn,test_[,1:5])
library(neuralnet)
pr.nn <- compute(nn,test_[,1:5])
test.r <- test_[,turn]
test.r <- test_[,'turn']
View(test_)
###Not useful for classification
MSE.nn <- sum((test.r - pr.nn$net.result)^2)/nrow(test_)
plot
plot(nn)
getwd()
setwd(C:/Users/Família/Desktop/UnityProject_discrete)
setwd("C:/Users/Família/Desktop/UnityProject_discrete")
logdata <- read.csv('log.txt', header=F)
colnames(logdata)<- c("sensor0","sensor1","sensor2","sensor3","sensor4","turn")
logdata$turn<-as.factor(logdata$turn)
m <- model.matrix(
~ sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + turn,
data = logdata
)
index <- sample(1:nrow(m),round(0.75*nrow(m)))
train_ <- m[index,]
test_ <- m[-index,]
library(neuralnet)
n <- names(train_)
f <- as.formula(turn0 + turn1 ~ sensor0 + sensor1 + sensor2 + sensor3 + sensor4)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "minimal",stepmax=1e6, threshold=0.1)
plot(nn)
load(file="trainedNN.RData")
plot(nn)
source('C:/Users/Família/Desktop/UnityProject_discrete/NN_log.R')
View(nn)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "minimal",stepmax=1e6, threshold=0.2)
source('C:/Users/Família/Desktop/UnityProject_discrete/NN_log.R')
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 100,stepmax=1e6, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e6, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e5, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e7, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e7, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e6, threshold=0.2)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e6, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e5, threshold=0.5)
nn <- neuralnet(f,data=train_,hidden=5,act.fct = "logistic", linear.output = FALSE, lifesign = "full",lifesign.step = 1000,stepmax=1e6, threshold=0.5)
plot(nn)
pr.nn <- compute(nn,test_[,2:6])
pr.nn_<-1*(pr.nn$net.result>0.5)+0*(pr.nn$net.result<0.5)
test.r <- test_[,c("turn0","turn1")]
#turn0 confusion matrix
turn0_pred_1=c(sum(pr.nn_[,1]==1&test.r[,1]==1),sum(pr.nn_[,1]==1&test.r[,1]==0))
turn0_pred_0=c(sum(pr.nn_[,1]==0&test.r[,1]==1),sum(pr.nn_[,1]==0&test.r[,1]==0))
turn0_confusionmx=data.frame(turn0_pred_1,turn0_pred_0)
row.names(turn0_confusionmx)=c("true_1","true_0")
#turn1 confusion matrix
turn1_pred_1=c(sum(pr.nn_[,2]==1&test.r[,2]==1),sum(pr.nn_[,2]==1&test.r[,2]==0))
turn1_pred_0=c(sum(pr.nn_[,2]==0&test.r[,2]==1),sum(pr.nn_[,2]==0&test.r[,2]==0))
turn1_confusionmx=data.frame(turn1_pred_1,turn1_pred_0)
row.names(turn1_confusionmx)=c("true_1","true_0")
View(turn0_confusionmx)
##Save workspace
save(nn,file="trainedNN.RData")
getwd()
turn1_confusionmx
View(turn1_confusionmx)
View(turn0_confusionmx)
pr.nn.tr <- compute(nn,train_[,2:6])
pr.nn.tr_<-1*(pr.nn.tr$net.result>0.5)+0*(pr.nn.tr$net.result<0.5)
train.r <- train_[,c("turn0","turn1")]
#turn0 confusion matrix train
tr.turn0_pred_1=c(sum(pr.nn.tr_[,1]==1&train.r[,1]==1),sum(pr.nn.tr_[,1]==1&train.r[,1]==0))
tr.turn0_pred_0=c(sum(pr.nn.tr_[,1]==0&train.r[,1]==1),sum(pr.nn.tr_[,1]==0&train.r[,1]==0))
tr.turn0_confusionmx=data.frame(turn0_pred_1,turn0_pred_0)
row.names(tr.turn0_confusionmx)=c("true_1","true_0")
#turn1 confusion matrix train
tr.turn1_pred_1=c(sum(pr.nn.tr_[,2]==1&train.r[,2]==1),sum(pr.nn.tr_[,2]==1&train.r[,2]==0))
tr.turn1_pred_0=c(sum(pr.nn.tr_[,2]==0&train.r[,2]==1),sum(pr.nn.tr_[,2]==0&train.r[,2]==0))
tr.turn1_confusionmx=data.frame(tr.turn1_pred_1,tr.turn1_pred_0)
row.names(tr.turn1_confusionmx)=c("true_1","true_0")
View(tr.turn0_confusionmx)
View(tr.turn0_confusionmx)
View(tr.turn0_confusionmx)
View(turn0_confusionmx)
pr.nn.tr <- compute(nn,train_[,2:6])
pr.nn.tr_<-1*(pr.nn.tr$net.result>0.5)+0*(pr.nn.tr$net.result<0.5)
train.r <- train_[,c("turn0","turn1")]
#turn0 confusion matrix train
tr.turn0_pred_1=c(sum(pr.nn.tr_[,1]==1&train.r[,1]==1),sum(pr.nn.tr_[,1]==1&train.r[,1]==0))
tr.turn0_pred_0=c(sum(pr.nn.tr_[,1]==0&train.r[,1]==1),sum(pr.nn.tr_[,1]==0&train.r[,1]==0))
tr.turn0_confusionmx=data.frame(turn0_pred_1,turn0_pred_0)
row.names(tr.turn0_confusionmx)=c("true_1","true_0")
#turn1 confusion matrix train
tr.turn1_pred_1=c(sum(pr.nn.tr_[,2]==1&train.r[,2]==1),sum(pr.nn.tr_[,2]==1&train.r[,2]==0))
tr.turn1_pred_0=c(sum(pr.nn.tr_[,2]==0&train.r[,2]==1),sum(pr.nn.tr_[,2]==0&train.r[,2]==0))
tr.turn1_confusionmx=data.frame(tr.turn1_pred_1,tr.turn1_pred_0)
row.names(tr.turn1_confusionmx)=c("true_1","true_0")
View(tr.turn0_confusionmx)
View(tr.turn1_confusionmx)
#turn0 confusion matrix train
tr.turn0_pred_1=c(sum(pr.nn.tr_[,1]==1&train.r[,1]==1),sum(pr.nn.tr_[,1]==1&train.r[,1]==0))
tr.turn0_pred_0=c(sum(pr.nn.tr_[,1]==0&train.r[,1]==1),sum(pr.nn.tr_[,1]==0&train.r[,1]==0))
tr.turn0_confusionmx=data.frame(tr.turn0_pred_1,tr.turn0_pred_0)
row.names(tr.turn0_confusionmx)=c("true_1","true_0")
#turn1 confusion matrix train
tr.turn1_pred_1=c(sum(pr.nn.tr_[,2]==1&train.r[,2]==1),sum(pr.nn.tr_[,2]==1&train.r[,2]==0))
tr.turn1_pred_0=c(sum(pr.nn.tr_[,2]==0&train.r[,2]==1),sum(pr.nn.tr_[,2]==0&train.r[,2]==0))
tr.turn1_confusionmx=data.frame(tr.turn1_pred_1,tr.turn1_pred_0)
row.names(tr.turn1_confusionmx)=c("true_1","true_0")
View(turn0_confusionmx)
View(tr.turn0_confusionmx)
#accuracy of turn1 and turn0
accuracy.turn1.te<-(turn1_confusionmx[1,1]+turn1_confusionmx[2,2])/sum(turn1_confusionmx)
accuracy.turn1.tr<-(tr.turn1_confusionmx[1,1]+tr.turn1_confusionmx[2,2])/sum(tr.turn1_confusionmx)
accuracy.turn0.te<-(turn0_confusionmx[1,1]+turn0_confusionmx[2,2])/sum(turn0_confusionmx)
accuracy.turn0.tr<-(tr.turn0_confusionmx[1,1]+tr.turn0_confusionmx[2,2])/sum(tr.turn0_confusionmx)
turn1_confusionmx[1,1]
turn1_confusionmx[2,1]
prec.turn1.te<-turn1_confusionmx[1,1]/(turn1_confusionmx[1,1]+turn1_confusionmx[1,2])
#precision and recall of turn1
prec.turn1.te<-turn1_confusionmx[1,1]/(turn1_confusionmx[1,1]+turn1_confusionmx[2,1])
prec.turn1.te<-turn1_confusionmx[1,1]/(turn1_confusionmx[1,1]+turn1_confusionmx[1,2])
#precision and recall of turn1
prec.turn1.te<-turn1_confusionmx[1,1]/(turn1_confusionmx[1,1]+turn1_confusionmx[2,1])
recall.turn1.te<-turn1_confusionmx[1,1]/(turn1_confusionmx[1,1]+turn1_confusionmx[1,2])
